from sqlalchemy import Column, Integer, String, Float, ForeignKey, Date
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()

# Produto
class Produto(Base):
    __tablename__ = 'produtos'
    
    id = Column(Integer, primary_key=True)
    codigo = Column(String, unique=True, nullable=False)
    nome = Column(String, nullable=False)
    descricao = Column(String)

# Técnico
class Tecnico(Base):
    __tablename__ = 'tecnicos'
    
    id = Column(Integer, primary_key=True)
    nome = Column(String, nullable=False)
    matricula = Column(String, unique=True, nullable=False)
    contato = Column(String)

# Usuário
class Usuario(Base):
    __tablename__ = 'usuarios'
    
    id = Column(Integer, primary_key=True)
    nome = Column(String, nullable=False)
    login = Column(String, unique=True, nullable=False)
    senha = Column(String, nullable=False)

# Fornecedor
class Fornecedor(Base):
    __tablename__ = 'fornecedores'
    
    id = Column(Integer, primary_key=True)
    nome = Column(String, nullable=False)
    cnpj = Column(String, unique=True, nullable=False)

# Estoque
class Estoque(Base):
    __tablename__ = 'estoque'
    
    id = Column(Integer, primary_key=True)
    produto_id = Column(Integer, ForeignKey('produtos.id'), nullable=False)
    produto = relationship('Produto')
    quantidade = Column(Float, nullable=False)
    quantidade_minima = Column(Float, nullable=False)

# Entrada de Produtos
class EntradaProduto(Base):
    __tablename__ = 'entradas_produtos'
    
    id = Column(Integer, primary_key=True)
    nota_fiscal = Column(String, nullable=False)
    produto_id = Column(Integer, ForeignKey('produtos.id'), nullable=False)
    produto = relationship('Produto')
    quantidade = Column(Float, nullable=False)

# Devolucao
class Devolucao(Base):
    __tablename__ = 'devolucoes'
    
    id = Column(Integer, primary_key=True)
    ordem_servico = Column(String, nullable=False)
    produto_id = Column(Integer, ForeignKey('produtos.id'), nullable=False)
    produto = relationship('Produto')
    quantidade = Column(Float, nullable=False)

# Requisicao de Materiais
class RequisicaoMaterial(Base):
    __tablename__ = 'requisicoes_materiais'
    
    id = Column(Integer, primary_key=True)
    ordem_servico = Column(String, nullable=False)
    tecnico_id = Column(Integer, ForeignKey('tecnicos.id'), nullable=False)
    tecnico = relationship('Tecnico')
    local_destino = Column(String, nullable=False)
    usuario_id = Column(Integer, ForeignKey('usuarios.id'), nullable=False)
    usuario = relationship('Usuario')
    data = Column(Date, nullable=False)
    
    produtos = relationship('RequisicaoProduto', back_populates='requisicao')

class RequisicaoProduto(Base):
    __tablename__ = 'requisicoes_produtos'

    id = Column(Integer, primary_key=True)
    requisicao_id = Column(Integer, ForeignKey('requisicoes_materiais.id'))
    requisicao = relationship('RequisicaoMaterial', back_populates='produtos')
    produto_id = Column(Integer, ForeignKey('produtos.id'))
    produto = relationship('Produto')
    quantidade = Column(Float, nullable=False)

# Movimentacao
class Movimentacao(Base):
    __tablename__ = 'movimentacoes'
    
    id = Column(Integer, primary_key=True)
    tipo_movimentacao = Column(String, nullable=False)
    quantidade = Column(Float, nullable=False)
    tecnico_id = Column(Integer, ForeignKey('tecnicos.id'))
    tecnico = relationship('Tecnico')
    data = Column(Date, nullable=False)
    produto_id = Column(Integer, ForeignKey('produtos.id'))
    produto = relationship('Produto')
